#include "uart_shell.h"



int initializeUart(INTC *intc, XUartPs *uart, u16 id) {
	XUartPs_Config *config;
	int status;
	u32 mask;

	/*
	 * TODO: 1. finish initialize UART
	 * 		 2. test functionality
	 * 		 3. test uart rcv behavior
	 * 		 4. finish shell
	 * 		 5. flesh out handling
	 */


	config = XUartPs_LookupConfig(id);

	if(config == NULL)
		return XST_FAILURE;


	status = XUartPs_CfgInitialize(uart, config, config->BaseAddress);

	if(status != XST_SUCCESS)
		return XST_FAILURE;


	status = XUartPs_SelfTest(uart);
	if(status != XST_SUCCESS)
		return XST_FAILURE;

	XUartPs_SetHandler(uart, uartHandler, uart);

	//list of interrupts
	mask =  XUARTPS_IXR_TOUT | XUARTPS_IXR_PARITY | XUARTPS_IXR_FRAMING |
			XUARTPS_IXR_OVER | XUARTPS_IXR_TXEMPTY | XUARTPS_IXR_RXFULL |
			XUARTPS_IXR_RXOVR;

	XUartPs_SetInterruptMask(uart, mask);

	XUartPs_SetOperMode(uart, XUARTPS_OPER_MODE_LOCAL_LOOP);
	XUartPs_SetRecvTimeout(uart, 8);

	//verify success

	//verify interrupt

	XUartPs_SetOperMode(uart, XUARTPS_OPER_MODE_NORMAL);



	return XST_SUCCESS;
}

void uartHandler( void *callbackRef, u32 event, unsigned int eventData) {
	switch(event) {
		case XUARTPS_EVENT_SENT_DATA:
			break;
		case XUARTPS_EVENT_RECV_DATA:
			break;
		case XUARTPS_EVENT_RECV_TOUT:
#ifdef LOG_UART
			xil_printf("\r\n UART timeout");
#endif
			break;
		case XUARTPS_EVENT_RECV_ERROR:
#ifdef LOG_UART
			xil_printf("\r\n UART error on receive");
#endif
			break;
		default:
			xil_printf("\r\n unhandled uart event");
	}
}

